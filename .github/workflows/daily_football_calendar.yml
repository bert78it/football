name: Daily Football Matches Calendar

on:
  schedule:
    # Run at 11:00 UTC (12:00 Rome time)
    - cron: '0 11 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      reason:
        description: 'Reason for manual workflow run'
        required: false
        default: 'Manual trigger'

jobs:
  generate-calendar:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to ensure we have all files
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies one by one
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        echo "Installing requests..."
        pip install requests==2.31.0
        echo "Installing python-dotenv..."
        pip install python-dotenv==1.0.0
        echo "Installing google packages..."
        pip install google-auth-oauthlib==1.2.0
        pip install google-auth-httplib2==0.2.0
        pip install google-api-python-client==2.114.0
        echo "Installing icalendar..."
        pip install icalendar==5.0.11
        echo "Installing pytz..."
        pip install pytz==2023.3
        echo "Installing beautifulsoup4..."
        pip install beautifulsoup4==4.12.2
        # List installed packages
        pip list
        # Test imports
        python -c "import requests; import dotenv; import google.oauth2; import icalendar; import pytz; import bs4; print('All imports successful')"
    
    - name: Configure API Credentials
      env:
        API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}
        GOOGLE_CALENDAR_CREDENTIALS: ${{ secrets.GOOGLE_CALENDAR_CREDENTIALS }}
        GOOGLE_CALENDAR_TOKEN: ${{ secrets.GOOGLE_CALENDAR_TOKEN }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        # Create directories
        mkdir -p credentials
        
        # Debug secrets (without revealing them)
        echo "Checking API_FOOTBALL_KEY length: ${#API_FOOTBALL_KEY}"
        echo "Checking FOOTBALL_DATA_API_KEY length: ${#FOOTBALL_DATA_API_KEY}"
        echo "Checking GOOGLE_CALENDAR_CREDENTIALS length: ${#GOOGLE_CALENDAR_CREDENTIALS}"
        echo "Checking GOOGLE_CALENDAR_TOKEN length: ${#GOOGLE_CALENDAR_TOKEN}"
        echo "Checking RECIPIENT_EMAIL length: ${#RECIPIENT_EMAIL}"
        
        # Create environment files
        echo "API_FOOTBALL_KEY=${API_FOOTBALL_KEY}" > .env
        echo "FOOTBALL_DATA_API_KEY=${FOOTBALL_DATA_API_KEY}" >> .env
        echo "RECIPIENT_EMAIL=${RECIPIENT_EMAIL}" >> .env
        
        # Create Google credentials files
        echo "${GOOGLE_CALENDAR_CREDENTIALS}" > credentials/credentials.json
        echo "${GOOGLE_CALENDAR_TOKEN}" > credentials/token.json
        
        # Debug file contents (without revealing secrets)
        echo "Checking .env file exists and size:"
        ls -l .env
        echo "Checking credentials files exist and sizes:"
        ls -l credentials/
        
        # Debug environment variables
        echo "Environment variables in .env:"
        cat .env | sed 's/=.*/=***/'
        
        # Debug Python environment variables
        echo "Testing Python environment variables:"
        python -c "import os; print('API_FOOTBALL_KEY in env:', bool(os.getenv('API_FOOTBALL_KEY'))); print('API_FOOTBALL_KEY in dotenv:', bool(os.getenv('API_FOOTBALL_KEY', None)))"
    
    - name: Run Football Matches Calendar
      env:
        API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}
        GOOGLE_CALENDAR_CREDENTIALS: ${{ secrets.GOOGLE_CALENDAR_CREDENTIALS }}
        GOOGLE_CALENDAR_TOKEN: ${{ secrets.GOOGLE_CALENDAR_TOKEN }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        # Print working directory and list files for debugging
        pwd
        ls -la
        
        # Debug environment variables
        echo "Environment variables before running scripts:"
        env | grep -E "API_|GOOGLE_|RECIPIENT_" | sed 's/=.*/=***/'
        
        # Run the fetch_matches script with debug output
        echo "Running fetch_matches.py..."
        python -c "import os; print('API_FOOTBALL_KEY:', bool(os.getenv('API_FOOTBALL_KEY')))"
        python fetch_matches.py
        
        if [ ! -f "matches.json" ]; then
          echo "Error: matches.json was not created"
          exit 1
        fi
        
        if [ ! -f "football_matches_calendar.ics" ]; then
          echo "Error: football_matches_calendar.ics was not created"
          exit 1
        fi
        
        echo "Running fetch_tv_schedule.py..."
        ls -l fetch_tv_schedule.py  # Debug: check if file exists
        cat fetch_tv_schedule.py | head -n 5  # Debug: check file contents
        python fetch_tv_schedule.py
        
        echo "Running send_calendar_email.py..."
        python send_calendar_email.py
