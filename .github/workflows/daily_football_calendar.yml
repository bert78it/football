name: Daily Football Matches Calendar

on:
  schedule:
    # Run at 11:00 UTC (12:00 Rome time)
    - cron: '0 11 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      reason:
        description: 'Reason for manual workflow run'
        required: false
        default: 'Manual trigger'

jobs:
  generate-calendar:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Debug Requirements
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Requirements.txt contents:"
        cat requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        pip install -r requirements.txt
        # Verify installations
        python -m pip list
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import icalendar; print('icalendar version:', icalendar.__version__)"
    
    - name: Configure API Credentials
      env:
        API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        FOOTBALL_DATA_API_KEY: ${{ secrets.FOOTBALL_DATA_API_KEY }}
        GOOGLE_CALENDAR_CREDENTIALS: ${{ secrets.GOOGLE_CALENDAR_CREDENTIALS }}
        GOOGLE_CALENDAR_TOKEN: ${{ secrets.GOOGLE_CALENDAR_TOKEN }}
        RECIPIENT_EMAIL: ${{ secrets.RECIPIENT_EMAIL }}
      run: |
        # Create directories
        mkdir -p credentials
        
        # Verify secrets
        if [ -z "$API_FOOTBALL_KEY" ]; then
          echo "Error: API_FOOTBALL_KEY is not set"
          exit 1
        fi
        if [ -z "$FOOTBALL_DATA_API_KEY" ]; then
          echo "Error: FOOTBALL_DATA_API_KEY is not set"
          exit 1
        fi
        if [ -z "$GOOGLE_CALENDAR_CREDENTIALS" ]; then
          echo "Error: GOOGLE_CALENDAR_CREDENTIALS is not set"
          exit 1
        fi
        if [ -z "$GOOGLE_CALENDAR_TOKEN" ]; then
          echo "Error: GOOGLE_CALENDAR_TOKEN is not set"
          exit 1
        fi
        if [ -z "$RECIPIENT_EMAIL" ]; then
          echo "Error: RECIPIENT_EMAIL is not set"
          exit 1
        fi
        
        # Create environment files
        echo "API_FOOTBALL_KEY=$API_FOOTBALL_KEY" > .env
        echo "FOOTBALL_DATA_API_KEY=$FOOTBALL_DATA_API_KEY" >> .env
        echo "RECIPIENT_EMAIL=$RECIPIENT_EMAIL" >> .env
        
        # Create Google credentials files
        echo "$GOOGLE_CALENDAR_CREDENTIALS" > credentials/credentials.json
        echo "$GOOGLE_CALENDAR_TOKEN" > credentials/token.json
        
        # Verify files were created
        if [ ! -f ".env" ]; then
          echo "Error: .env file not created"
          exit 1
        fi
        if [ ! -f "credentials/credentials.json" ]; then
          echo "Error: credentials.json not created"
          exit 1
        fi
        if [ ! -f "credentials/token.json" ]; then
          echo "Error: token.json not created"
          exit 1
        fi
    
    - name: Run Football Matches Calendar
      run: |
        # Print working directory and list files for debugging
        pwd
        ls -la
        
        # Run the fetch_matches script
        echo "Running fetch_matches.py..."
        python fetch_matches.py
        
        if [ ! -f "matches.json" ]; then
          echo "Error: matches.json was not created"
          exit 1
        fi
        
        if [ ! -f "football_matches_calendar.ics" ]; then
          echo "Error: football_matches_calendar.ics was not created"
          exit 1
        fi
        
        echo "Running fetch_tv_schedule.py..."
        python fetch_tv_schedule.py
        
        echo "Running send_calendar_email.py..."
        python send_calendar_email.py
